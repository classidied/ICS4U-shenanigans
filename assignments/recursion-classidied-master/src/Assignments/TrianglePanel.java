/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Assignments;

import java.awt.*;
import java.util.Random;
/**
 *
 * @author claire
 */
public class TrianglePanel extends javax.swing.JPanel {
    // initializing variables
    int x = 248, y = 360, length = 200, depth;
    Random r = new Random();
    Color cLevel;
    /**
     * Creates new form TrianglePanel
     */
    public TrianglePanel() {
        initComponents();
    }
    /**
     * Draws fractals
     * @param g graphics
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // drawing triangles 
        sierpinski(g, depth, x, y, length);
    }
    /**
     * Method to draw a triangle
     * @param x x-coordinate of bottom vertex
     * @param y y-coordinate of bottom vertex
     * @param length side length of triangle
     * @return integer array
     */
    public static int[][] triangle(int x, int y, int length) { 
        // 3 points, 2 coordinates per point
        int[][] pts = new int[3][2];
        // find height of triangle
        int h = (int) (Math.sqrt(Math.pow(length, 2) - Math.pow((length/2), 2)));
        // bottom vertice
        pts[0][0] = x;
        pts[0][1] = y;
        // left vertice
        pts[1][0] = x - (length/2); 
        pts[1][1] = y - h; 
        // right vertice
        pts[2][0] = x + (length/2);
        pts[2][1] = y - h;
        return pts;
    }
    /**
     * Recursively drawing Sierpinski's Triangle
     * @param g graphics
     * @param depth levels of fractal (?)
     * @param x initial x coordinate
     * @param y initial y coordinate
     * @param length initial length of triangle
     */
    public void sierpinski(Graphics g, int depth, int x, int y, int length) {
        // grabbing points
        int[][] points = triangle(x, y, length);
        int[] xc = {points[0][0], points[1][0], points[2][0]};
        int[] yc = {points[0][1], points[1][1], points[2][1]};
        // creating triangle object using polygon
        Polygon tri = new Polygon(xc, yc, 3);
        // drawing initial triangle in a random color
        cLevel = new Color(r.nextInt(256), r.nextInt(256), r.nextInt(256));
        g.setColor(cLevel);
        g.fillPolygon(tri);
        // recursively drawing triangles if there is depth left
        if (depth > 0) {
            // randomizing color of each recursion
            cLevel = new Color(r.nextInt(256), r.nextInt(256), r.nextInt(256));
            g.setColor(cLevel);
            // top triangle
            sierpinski(g, depth - 1, x, points[1][1], length/2);
            // bottom left triangle
            sierpinski(g, depth - 1, points[1][0], y, length/2);
            // bottom right triangle
            sierpinski(g, depth - 1, points[2][0], y, length/2);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
