/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Assignments;

import java.awt.*;

/**
 *
 * @author claire
 */
public class KochPanel extends javax.swing.JPanel {
    // init variables
    int depth = 1, x = 100, y = 200, x2 = 420, y2 = 200, length = 320;
    double a1 = Math.PI/3; // 60 degrees
    double a2 = (2*(Math.PI))/3; // 120 degrees
    // find height of triangle
    int h = (int) (Math.sqrt(Math.pow(length, 2) - Math.pow((length/2), 2)));
   
    /**
     * Creates new form KochPanel
     */
    public KochPanel() {
        initComponents();
    }
    /**
     * Draws fractals
     * @param g 
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // recursively drawing
        kochCurve(g, depth, x, x2, y, y2, length);
    }
    /**
     * Recursively drawing the Koch curve fractal
     * @param g graphics
     * @param depth number of times recursion is iterated
     * @param x 
     * @param y
     * @param length side length of initial triangle/size of graphic
     */
    public void kochCurve(Graphics g, int depth, int x, int x2, int y, int y2, int length) {
        // drawing initial line
        g.drawLine(x, y, x2, y2);
        // to find middle section of line use 1/3, 2/3 ratios to get modified x coordinates
        int mx1 = (int) (x + (0.333*length));
        int mx2 = (int) (x + (0.666*length));
        int my1 = (int) (y - (0.333*h));
        int my2 = (int) (y - (0.666*h));
        // drawing white line to "erase" previous middle section
        g.setColor(Color.RED);
        if (y != y2) {
            g.drawLine(mx1, y, mx2, y);
        } else {
            g.drawLine(mx1, my1, mx2, my2);
        }
        // drawing 2 sides of an equilateral triangle
        g.setColor(Color.BLACK);
        // getting top point
        int dx = mx1 + (int)(Math.cos(a1)*((0.33)*length));
        int dy = y - (int)(Math.sin(a1)*((0.33)*length));
        g.drawLine(mx1, y, dx, dy);
        g.drawLine(mx2, y, dx, dy);
        // rotate line for triangle
        //int dy1 = mx1 - (int)(Math.cos(Math.PI/2)*((0.33)*length));
        
        // recursively modifying lines to the depth's degree
        if (depth > 0) {
           kochCurve(g, depth - 1, x, mx1, y, y2, length/3);
           kochCurve(g, depth - 1, mx2, x2, y, y2, length/3);
           
           kochCurve(g, depth - 1, mx1, dx, y, dy, length/3);
           //kochCurve(g, depth - 1, mx2, y, length/3);
           
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
