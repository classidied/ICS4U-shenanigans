/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package textfileio;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
/**
 *
 * @author claire
 */
public class LoginPanel extends javax.swing.JPanel {
    // initializing variables
    File users = new File("users.txt");
    File badpw = new File("dictbadpass.txt");
    // creating ArrayList of users
    ArrayList<String> userArray = new ArrayList<>();
    // setting delimiter
    String delim = ", ";
    
    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
        initComponents();
    }
    /**
     * writes user info to file
     * @param userinfo formatted string of info
     */
    public void write(String userinfo) {
        PrintWriter pw = null;
        try {
            // writing user to file
            pw = new PrintWriter(new FileWriter(users, true));
            pw.print(userinfo + "\n");
        } catch (IOException ex) {
        }
        pw.close();
    }
    
    /**
     * checks whether password is strong or not
     * @param password
     * @return true/false
     */
    public boolean strongPw(String password) {
        Scanner sc = null;
        boolean strong = true;
        // checking password length
        if (password.length() <= 6) {
            strong = false;
        }
        try {
            sc = new Scanner(badpw);
            // scanning through bad passwords file
            while (sc.hasNextLine()) {
                // checking password against dictionary words
                if (password.equals(sc.nextLine())) {
                    strong = false;
                    break;
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println("File not found");
        }
        return strong;
    }
    /**
     * method to check whether the user exists
     * @param username
     * @return true/false
     */
    public boolean exist(String username) {
        // initializing scanner and boolean
        //Scanner sc = null;
        boolean exists = false;
        // searching through userArray 
        for (int i = 0; i < userArray.size(); i++) {
            // storing user info in array
            String[] userinfo = userArray.get(i).split(delim);
            // check if username matches/therefore exists
            if (userinfo[2].equals(username)) {
                exists = true; 
                break;
            }
        }
        return exists;
    }
    /**
     * encrypting password using MD5
     * @param password
     * @return encrypted password
     */
    public String encrypt(String password) {
        try {
            // MD5 encryption
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes()); 
            // encrypt password
            byte byteData[] = md.digest();
            // express in encrypted hex form
            String sb1 = "";
            for (int i = 0; i < byteData.length; i++) {
                sb1 += (Integer.toHexString((byteData[i] & 0xFF) | 0x100).substring(1, 3));
            }
            password = sb1;
        } catch (NoSuchAlgorithmException ex) {
            System.out.println("No algorithm available");
        }
        return password;
    }
    /**
     * checks whether correct password has been entered
     * @param username
     * @param password
     * @return true/false
     */
    public boolean correctPw(String username, String password) {
        boolean correct = true;
        // scanning through userArray 
        for (int i = 0; i < userArray.size(); i++) {
            // storing user info in array
            String[] userinfo = userArray.get(i).split(delim);
            // if username matches, check passwords
            if (userinfo[2].equals(username)) {
                // checks whether the saved encrypted original matches entered encrypted value
                correct = userinfo[3].equals(encrypt(password)); 
                break;
            }
        }
        return correct; 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
