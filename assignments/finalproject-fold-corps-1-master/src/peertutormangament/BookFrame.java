/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package peertutormangament;

import java.awt.Color;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Helia
 */
public class BookFrame extends javax.swing.JFrame {
    DefaultTableModel table;
    String courseInput;
    BookSearchFrame searchFrame;

    /**
     * Creates new form BookFrame
     */
    public BookFrame() {
        initComponents();
        table = (DefaultTableModel) bookingTable.getModel();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        bookPanel1 = new peertutormangament.BookPanel();
        resultsL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        bookB = new javax.swing.JButton();
        closeB = new javax.swing.JButton();

        jButton3.setText("Book");

        jButton7.setText("Book");

        jButton10.setText("Book");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultsL.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        resultsL.setText("Showing Results for: ");

        bookingTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Day", "Period", "Subject 1", "Subject 2", "Subject 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookingTable.setShowHorizontalLines(false);
        bookingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(bookingTable);
        if (bookingTable.getColumnModel().getColumnCount() > 0) {
            bookingTable.getColumnModel().getColumn(0).setResizable(false);
            bookingTable.getColumnModel().getColumn(1).setResizable(false);
            bookingTable.getColumnModel().getColumn(2).setResizable(false);
            bookingTable.getColumnModel().getColumn(3).setResizable(false);
            bookingTable.getColumnModel().getColumn(4).setResizable(false);
            bookingTable.getColumnModel().getColumn(5).setResizable(false);
        }

        bookB.setText("Book Selected Tutor");
        bookB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBActionPerformed(evt);
            }
        });

        closeB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/peertutormangament/back.png"))); // NOI18N
        closeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookPanel1Layout = new javax.swing.GroupLayout(bookPanel1);
        bookPanel1.setLayout(bookPanel1Layout);
        bookPanel1Layout.setHorizontalGroup(
            bookPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultsL, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(bookPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookB)
                .addGap(305, 305, 305))
        );
        bookPanel1Layout.setVerticalGroup(
            bookPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultsL)
                    .addComponent(closeB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bookB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(bookPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBActionPerformed
        table.setRowCount(0);//clear the table
        dispose();//close the window
        searchFrame = new BookSearchFrame();
        searchFrame.setVisible(true);
    }//GEN-LAST:event_closeBActionPerformed
    /**
     * Plays sound effect for function
     * @param location - audio file name
     */
    public void Music(String location){//play music from the given file path
        InputStream music;
        try {
            music = new FileInputStream (new File(location));//find the music file
            AudioStream audio= new AudioStream(music);
            AudioPlayer.player.start(audio);//play it right away
        } catch(IOException e) {
            String msg = "A necessary file is missing.";
            JOptionPane.showMessageDialog(null, msg);
        }
    }
    private void bookBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBActionPerformed
        int count = bookingTable.getSelectedRow();//used to remove a selected row
        int tutorIndex;//used in UpdateData
        Scanner s = null;
        String user;// skip the column names
        File tutorCSV = new File("tutor.csv");
        try {
            s = new Scanner(tutorCSV);
        } catch (FileNotFoundException ex) {
        }
        if (count<=-1){//if the user hasn't selected a tutor, but clicks on book button, show them an error
            Music ("error.wav");
            UIManager.put("OptionPane.background", new Color (0,120,235));//change the background of the option pane
            JOptionPane.showMessageDialog(null, "Please select a tutor","Blue Screen of Death",JOptionPane.ERROR_MESSAGE);
        }
        else if (JOptionPane.showConfirmDialog(null, "Booking: " + table.getValueAt(count, 0), "WARNING",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {//confirm booking selection
            /*
            This section of the code will look through the csv file to find the index/row number of tutor the user is trying to book.
            Confirming by tutor details by checking the name, and the course they are offering help for
            Using update data to update the csv file to book the selected tutor
             */
            for (int i = 0; i >= 0; i++) { //go through every tutor
                try {
                    user = s.nextLine();//read each tutors description 
                    String[] fields = user.split(",");//separate the details into fields array
                    if (fields.length < 10) {
                        continue;
                    } else if ((fields[2].equals(table.getValueAt(count, 0))) && (fields[3].equals(table.getValueAt(count, 1)))
                            && (fields[4].equals(table.getValueAt(count, 3))) && (fields[5].equals(table.getValueAt(count, 4)))
                            && (fields[6].equals(table.getValueAt(count, 5))) && (fields[9].equals(table.getValueAt(count, 2)))) {//6 step authentication of tutor 
                        
                        tutorIndex = i;
                        updateData(tutorIndex);
                        break;
                    }
                } catch (NullPointerException ex) {
                } catch (NoSuchElementException e){
                    break;
                }
            }
            Music ("success.wav");
            table.removeRow(count);//remove the selected row from the current table
        }
    }//GEN-LAST:event_bookBActionPerformed
    /**
     * Used by the BookSearchFrame to show and confirm the result with the user
     * @param newTitle 
     */
    public void setResult(String newTitle) {
        resultsL.setText(newTitle);
    }
    /**
     * Used for searching for tutors
     * @param course 
     */
    public void setCode(String course) {
        courseInput = course; 
    }
    /**
     * Method to overwrite the data in the tutor.csv depending on who was booked
     * @param count - index of tutor info to be modified
     */
    public void updateData(int count) {
        Scanner s = null;
        PrintWriter pw = null;
        String user;
        File tutor = new File("tutor.csv");
        ArrayList<TutorInfo> list = new ArrayList<>();
        try {
            s = new Scanner(tutor);
        } catch (FileNotFoundException ex) {
        }
        /*
        This section of the code will go through the tutor csv file to save all the tutor data in an arraylist
         */
        while (s.hasNextLine()) {
            try {
                user = s.nextLine();
                String[] fields = user.split(",");//separate the details into fields array
                boolean booked = Boolean.parseBoolean(fields[8]);
                TutorInfo otherTutors = new TutorInfo(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6], fields[7], booked, fields[9]);//make a tutor
                list.add(otherTutors);//save the detail in list arraylist
                pw = new PrintWriter(tutor);
            } catch (IOException e) {
            } catch (NoSuchElementException e) {// if no matching username was found, then print no User found
                break;
            } catch (NullPointerException e) {
                continue;
            }
        }
        pw.print("");//clear the csv file
        pw.close();
        try {
            pw = new PrintWriter(new FileWriter(tutor, true));
        } catch (IOException ex) {
        }
        /*
        This section of the code will go through the arraylist that was set up previously and write all the details back into the csv file
        Once it reaches the index of the tutor the user wants to book, it will change their boolean from false to true
         */
        for (int i = 0; i >= 0; i++) { //go through every tutor
            try {
                if (i == count) {///if reached the selected tutor index, change their boolean from false to true
                    TutorInfo bookedTutor = new TutorInfo(list.get(i).timeStamp, list.get(i).email, list.get(i).name, list.get(i).day, list.get(i).course1, list.get(i).course2, list.get(i).course3, list.get(i).studentNum, true, list.get(i).period);
                    pw.println(bookedTutor);//write the changes into the csv file
                } else {
                    pw.println(list.get(i));//other tutors that have not been selected should be written back into the file without changes
                }
            } catch (NoSuchElementException | IndexOutOfBoundsException e) {
                break;
            } catch (NullPointerException e) {
                continue;
            }
        }
        pw.close();//save the changes
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookB;
    private peertutormangament.BookPanel bookPanel1;
    public javax.swing.JTable bookingTable;
    private javax.swing.JButton closeB;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel resultsL;
    // End of variables declaration//GEN-END:variables
}
