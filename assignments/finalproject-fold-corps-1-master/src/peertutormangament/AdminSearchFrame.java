package peertutormangament;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 * 
 * @author olivia
 */
public class AdminSearchFrame extends javax.swing.JFrame {
    DefaultTableModel table;
    DeletionFrame deletionFrame;
    public boolean empty;
    public String userInput;
    public DeletionFrame dFrame;
    public ArrayList<TutorInfo> matchedTutors;
    LoginFrame login;
   
    /**
     * Creates new form AdminSearchFrame
     */
    public AdminSearchFrame() {
        initComponents();
        try {
            //initializes deletion frame object
            login=new LoginFrame();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AdminSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //initializing deletion frame object
        deletionFrame=new DeletionFrame();
        //variable to detect whether or not there's anything in the search bar when the user searches
        empty=true;
        //variable representing the actual table that will appear in the deletion method
        table = (DefaultTableModel) deletionFrame.jTable1.getModel();
        //arrayList that holds all of the tutors that match what the user searches for
        matchedTutors=new ArrayList<TutorInfo>();
        setTitle("Admin Management Search");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        enterNameNum = new java.awt.TextField();
        adminSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(new java.awt.Color(255, 255, 255));
        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        label1.setText("WELCOME");
        getContentPane().add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 300, 56));

        label2.setBackground(new java.awt.Color(255, 255, 255));
        label2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        label2.setText("Enter a Tutor's Full Name or Student Number");
        getContentPane().add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, 46));

        label3.setBackground(new java.awt.Color(255, 255, 255));
        label3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label3.setText("(ex. John Doe or 347809182)");
        getContentPane().add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(277, 236, -1, -1));

        enterNameNum.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        enterNameNum.setText("Enter student name or student number");
        enterNameNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterNameNumFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enterNameNumFocusLost(evt);
            }
        });
        getContentPane().add(enterNameNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(219, 299, 353, 37));

        adminSearch.setText("Search");
        adminSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminSearchActionPerformed(evt);
            }
        });
        getContentPane().add(adminSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 346, -1, -1));

        jLabel1.setText("*You can only search for one name at a time");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, -1));

        backB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/peertutormangament/logout.png"))); // NOI18N
        backB.setText("Logout");
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });
        getContentPane().add(backB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 100, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/peertutormangament/background.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adminSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminSearchActionPerformed
        //changes colour of the background of the error message
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.blue);
        //user input is whatever the users searched for and is automaticaly converted to all caps
        userInput = (enterNameNum.getText()).toUpperCase();
        //if there's nothing in the search bar when the search button is pressed
        if (empty == true) {
            //error sounds effect
            soundEffect("error.wav");
            //message for error window
            String m = "Enter valid information.";
            //error window appears
            JOptionPane.showMessageDialog(null, m);
        } else {
            Scanner s = null;
            try {
                //scanner reads from the tutor information file
                s = new Scanner(new File("tutor.csv"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AdminSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //the string students represents the line that is currently being read
            //read this line first so that the header of the file is skipped
            String student = s.nextLine();
            while (s.hasNextLine()) {
                try {
                    //reads the line
                    student = s.nextLine();
                    //whole line is delimited
                    String[] fields = student.split(",");
                    //if the user input matches the name of the current line or the student number
                    if ((fields[2].toUpperCase().equals(userInput)) || (fields[7].equals(userInput))) {
                        //display the tutor's information in the table
                        //Name, student number, email, subject 1, subject 2, subject 3
                        boolean booked = Boolean.parseBoolean(fields[8]);
                        TutorInfo t = new TutorInfo(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6], fields[7], booked, fields[9]);
                        table.addRow(new Object[]{fields[2], fields[7], fields[1], fields[4], fields[5], fields[6]});//add the details to the table
                        // add to the list of tutors that match the userInput
                        matchedTutors.add(t);
                        //   match=true;
                    }
                } catch (NoSuchElementException ex) {
                    break;
                } catch (NullPointerException ex) {
                    continue;
                }
            }
            //if no matches were found a pop up window will appear
            if (matchedTutors.isEmpty()) {
                //plays error sound effect
                soundEffect("error.wav");
                //displays error pop-up
                String message = userInput + " does not match an existing tutor.";
                JOptionPane.showMessageDialog(null, message);
            } else {
                //on the top of the table in the deletion frame whatever the user inputted will be displayed
                deletionFrame.showResult("Showing results for: " + userInput);
                //the deletion window will open
                deletionFrame.setVisible(true);
                //closes this frame when the other frame(deletion frame) opens
                this.dispose();
                deletionFrame.input(userInput);
            }
        }

    }//GEN-LAST:event_adminSearchActionPerformed

    private void enterNameNumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterNameNumFocusGained
        //if when the user is on the window and the text in the text field says:
        if (enterNameNum.getText().equals("Enter student name or student number")) {
            //the textfield isn't empty/ it isn't going to be empty because the user is going to type
            empty = false;
            //remove the pre-set text
            enterNameNum.setText("");
        }
    }//GEN-LAST:event_enterNameNumFocusGained

    private void enterNameNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterNameNumFocusLost
        // if the textfield is empty
        if (enterNameNum.getText().equals("")) {
            //set the boolean variable to true
            empty = true;
            //when the cursor isn't present on the textfield anymore/when the user isn't on the window, display:
            enterNameNum.setText("Enter student name or student number");
            //set the colour of the font
            enterNameNum.setForeground(new Color(50, 50, 50));
        }
    }//GEN-LAST:event_enterNameNumFocusLost

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBActionPerformed
     /**
     * 
     * @param s name of the audio file to play
     */
    public void soundEffect(String s){
        InputStream sound;
        try {
            //finds the file with a name matching String s
            sound = new FileInputStream(new File(s));
            //intializes audiostream object to play audio
            AudioStream audio = new AudioStream(sound);
            //plays the audio
            AudioPlayer.player.start(audio);
        } catch (IOException e) {
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminSearchFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminSearch;
    private javax.swing.JButton backB;
    private java.awt.TextField enterNameNum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    // End of variables declaration//GEN-END:variables
}
