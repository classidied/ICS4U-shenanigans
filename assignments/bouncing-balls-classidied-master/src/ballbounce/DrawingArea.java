/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ballbounce;

import java.util.ArrayList;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author claire
 */
public class DrawingArea extends javax.swing.JPanel {
    // init variables 
    Image img;
    // creating global timer 
    Timer t1;
    int ms = 100; 
     // creating ArrayList of balls
    ArrayList<Ball> balls = new ArrayList<>();
    /**
     * Creates new form DrawingArea
     */
    public DrawingArea() {
        initComponents();
        t1 = new Timer(ms, new TimerListener());
        // default image
        img = Toolkit.getDefaultToolkit().getImage("aliens.jpg");
    }
   
    // paint method
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g); 
        // drawing background image
        g.drawImage(img, 0, 0, this); 
        // drawing balls
        for (int i = 0; i < balls.size(); i++) {
            Ball ball = balls.get(i);
            g.setColor(ball.cBall);
            g.fillOval(ball.x, ball.y, 22, 22);
        }
        //g.drawLine(x1, y1, x2, y2);
        
    }
    // method to move ball
    public void moveBall(Ball b) {
        b.x += b.xdir;
        b.y += b.ydir;
        // bouncing off walls
        if (b.x <= 0 || b.x >= getWidth() - 22) { // subtracting diameter of ball to ensure it stays within bounds
            b.xdir *= -1;
        }
        if (b.y <= 0 || b.y >= getHeight() - 22) {
            b.ydir *= -1;
        }
    }
    // method to add ball
    public void addBall() {
        Ball b = new Ball();
        balls.add(b);
    }
    
    // performs actions
    private class TimerListener implements ActionListener { 
       @Override
        public void actionPerformed(ActionEvent e) {
            // looping through balls array to move each one
            for (int i = 0; i < balls.size(); i++) {
                moveBall(balls.get(i));
            } 
            repaint();
        }
    }
    // method to start animation/timer
    public void anim() { 
        t1.start();
        t1.setInitialDelay(ms);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
